Package coolc.compiler.autogen;

Helpers
    all = [0 .. 0xFFFF];
    cr = 13;
    lf = 10;
    
    a = ['a' + 'A'];
    b = ['b' + 'B'];
    c = ['c' + 'C'];
    d = ['d' + 'D'];
    e = ['e' + 'E'];
    f = ['f' + 'F'];
    g = ['g' + 'G'];
    h = ['h' + 'H'];
    i = ['i' + 'I'];
    j = ['j' + 'J'];
    k = ['k' + 'K'];
    l = ['l' + 'L'];
    m = ['m' + 'M'];
    n = ['n' + 'N'];
    o = ['o' + 'O'];
    p = ['p' + 'P'];
    q = ['q' + 'Q'];
    r = ['r' + 'R'];
    s = ['s' + 'S'];
    t = ['t' + 'T'];
    u = ['u' + 'U'];
    v = ['v' + 'V'];
    w = ['w' + 'W'];
    x = ['x' + 'X'];
    y = ['y' + 'Y'];
    z = ['z' + 'Z'];
    
    alpha = ['A'..'Z'] | ['a'..'z'] | [0x7F .. 0xFF];
    ucase = ['A'..'Z'];
    lcase = ['a'..'z'];
    digit = ['0'..'9'];
        
    eol =	[ [ cr + lf ] + [ cr + lf ] ];
    
	comment_chr = [all - ['(' + '*' ] ] | '\' ')' | '\' '*' | '\' '('  ;
	

    // 8 - backspace
    // 9 - tab
    // 10 - lf, nl
    // 11 - vertical tab
    // 12 - form feed
    // 13 - cr
    blank = (' ' | 8 | 9 | lf | 11 | 12 | cr );
    
States
	initial,
	lcomment,
	comment;
	
Tokens
    // klass fi if in inherits isvoid let loop pool then else while case esac new of not
    // lbrace rbrace lparen rparen semi colon 
    // mult div plus minus neg lt le eq at
    // assign darrow comma dot
    // error_star_lpar int_const bool_const type_id object_id str_const str_err comment
   
    {initial} if = i f;
	{initial} hola = 'hola';
	{initial} klass = c l a s s;
	{initial} fi = f i;
	{initial} in = i n;
	{initial} inherits = i n h e r i t s;
	{initial} isvoid = i s v o i d;
	{initial} let = l e t;
	{initial} loop = l o o p;
	{initial} pool = p o o l;
	{initial} then = t h e n;
	{initial} while = w h i l e;
	{initial} case = c a s e;
	{initial} esac = e s a c;
	{initial} new = n e w;
	{initial} of = o f;
	{initial} not = n o t;
	{initial} else = e l s e;
	{initial} them = t h e m;
	
	{initial} lbrace = '{';
	{initial} rbrace = '}';
	{initial} lparen = '(';
	{initial} rparen = ')';
	{initial} semi = ';';
	{initial} comma = ',';
	{initial} colon = ':';
	{initial} dot = '.' ;
	
	{initial} plus = '+' ;
	{initial} minus = '-' ;
	{initial} mult = '*' ;
	{initial} div = '/';
	{initial} at = '@';
	{initial} neg = '~';
	{initial} lt = '<';
	{initial} eq = '=';
	{initial} assign = '<-';
	{initial} darrow = '=>';
	{initial} le = '<=';
	
	{initial} blank = blank+;
	{initial} bool_const = ('t' r u e )|('f' a l s e);
	{initial} object_id = lcase (alpha | digit | '_')*;
	{initial} type_id  = ucase (alpha | digit | '_')*;	
	
	{initial} int_const = digit+;

	{initial} error_star_lpar = '*)';
	
	{initial->comment} comment_start = '(' '*';
	{comment} comment_in = '(' '*';
	{comment->initial} comment_end = '*' ')';
	{comment} comment_txt = comment_chr*;
	{comment} comment_star = '*';
	{comment} comment_lpar = '(';
	
	
	{initial->lcomment} lcomment_start = '-' '-';
	{lcomment} lcomment_txt = ([all -10])*;
	{lcomment->initial} lcomment_end = lf;
	
	
	
Ignored Tokens

	comment_start, comment_in, comment_end, comment_txt, comment_star, comment_lpar, lcomment_start, lcomment_txt,
	lcomment_end,	blank;

Productions
	 source = hola;